---
import Layout from '../../layouts/Layout.astro';
import { supabase } from '../../lib/supabase';
import { authenticate } from '../../lib/auth';
import CultivoPlanner from '../../components/cultivos/indoor/CultivoPlanner';

const { id } = Astro.params;
const { user, redirect } = await authenticate(Astro);
if (redirect) {
    return Astro.redirect(redirect);
}

const user_id = user?.id;


const { data: cultivo, error } = await supabase
  .from('cultivos')
  .select('config')
  .eq('id', id)
  .eq('uuid', user_id)
  .single();

// Add redirect if config already exists and has data
if (cultivo?.config?.numPlantas > 0) {
    return Astro.redirect(`/cultivo/${id}/indoor`);
}

const config = cultivo?.config || {
    numPlantas: 0,
    maceteroAncho: 0,
    maceteroLargo: 0,
    espacioAncho: 0,
    espacioLargo: 0,
    maxCapacity: 0,
};

console.log(config);
---


<Layout title="Cultivo" description="Cultivo">
    <div class="container mx-auto p-4">
        <h1 class="text-2xl font-bold mb-6">Planificador de Cultivo</h1>
        
        <form id="cultivoForm" class="space-y-4">
            <input type="hidden" name="maxCapacity" value={config.maxCapacity} />
            <div class="space-y-2">
                <label class="block">
                    Número de plantas:
                    <input
                        type="number"
                        name="numPlantas"
                        min="1"
                        required
                        value={config.numPlantas}
                        class="border p-2 rounded w-full"
                    />
                </label>
            </div>

            <div class="space-y-2">
                <h3 class="font-bold">Dimensiones del macetero:</h3>
                <div class="grid grid-cols-2 gap-4">
                    <label>
                        Ancho (cm):
                        <input
                            type="number"
                            name="maceteroAncho"
                            min="1"
                            required
                            value={config.maceteroAncho}
                            class="border p-2 rounded w-full"
                        />
                    </label>
                    <label>
                        Largo (cm):
                        <input
                            type="number"
                            name="maceteroLargo"
                            min="1"
                            required
                            value={config.maceteroLargo}
                            class="border p-2 rounded w-full"
                        />
                    </label>
                </div>
            </div>

            <div class="space-y-2">
                <h3 class="font-bold">Dimensiones del espacio de cultivo:</h3>
                <div class="grid grid-cols-2 gap-4">
                    <label>
                        Ancho (cm):
                        <input
                            type="number"
                            name="espacioAncho"
                            min="1"
                            required
                            value={config.espacioAncho}
                            class="border p-2 rounded w-full"
                        />
                    </label>
                    <label>
                        Largo (cm):
                        <input
                            type="number"
                            name="espacioLargo"
                            min="1"
                            required
                            value={config.espacioLargo}
                            class="border p-2 rounded w-full"
                        />
                    </label>
                </div>
            </div>

            <button 
                type="submit" 
                class="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"
            >
                Guardar Configuración
            </button>
        </form>

        <CultivoPlanner 
            client:visible 
            formData={config}
            cultivoId={id}
        />
    </div>
</Layout>

<script>
    const form = document.querySelector('#cultivoForm') as HTMLFormElement;
    const inputs = form?.querySelectorAll('input');
    const cultivoId = window.location.pathname.split('/').pop();

    const calculateMaxCapacity = (data: any) => {
        // Opción 1: Orientación normal
        const maxMacetasAncho = Math.floor(data.espacioAncho / data.maceteroAncho);
        const maxMacetasLargo = Math.floor(data.espacioLargo / data.maceteroLargo);
        const capacidadNormal = maxMacetasAncho * maxMacetasLargo;

        // Opción 2: Orientación invertida
        const maxMacetasAnchoInverso = Math.floor(data.espacioAncho / data.maceteroLargo);
        const maxMacetasLargoInverso = Math.floor(data.espacioLargo / data.maceteroAncho);
        const capacidadInvertida = maxMacetasAnchoInverso * maxMacetasLargoInverso;

        // Retornar la mayor capacidad entre las dos orientaciones posibles
        return Math.max(capacidadNormal, capacidadInvertida);
    };



    const updatePlanner = () => {
        if (!form) return;
        
        const formData = new FormData(form);
        const data = {
            numPlantas: Number(formData.get('numPlantas')) || 0,
            maceteroAncho: Number(formData.get('maceteroAncho')) || 0,
            maceteroLargo: Number(formData.get('maceteroLargo')) || 0,
            espacioAncho: Number(formData.get('espacioAncho')) || 0,
            espacioLargo: Number(formData.get('espacioLargo')) || 0,
            maxCapacity: Number(formData.get('maxCapacity')) || 0,
        };

        // Calculamos maxCapacity y lo añadimos al objeto data
        data.maxCapacity = calculateMaxCapacity(data);
        
        
        // Actualizamos el valor del input oculto
        const maxCapacityInput = form.querySelector('input[name="maxCapacity"]') as HTMLInputElement;
        if (maxCapacityInput) {
            maxCapacityInput.value = data.maxCapacity.toString();
        }

        const event = new CustomEvent('updatePlanner', { detail: data });
        window.dispatchEvent(event);
    };

    // Guardar configuración
    form?.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const formData = new FormData(form);
        const config = {
            numPlantas: Number(formData.get('numPlantas')) || 0,
            maceteroAncho: Number(formData.get('maceteroAncho')) || 0,
            maceteroLargo: Number(formData.get('maceteroLargo')) || 0,
            espacioAncho: Number(formData.get('espacioAncho')) || 0,
            espacioLargo: Number(formData.get('espacioLargo')) || 0,
            maxCapacity: Number(formData.get('maxCapacity')) || 0,
        };

        try {
            const response = await fetch('/api/cultivos/config-cultivo', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    id: cultivoId,
                    config
                })
            });

            const data = await response.json();
            
            if (data.success) {
                // Redirect after successful save
                window.location.href = `/cultivo/${cultivoId}/indoor/strains`;
            } else {
                alert('Error al guardar la configuración: ' + data.error);
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Error al guardar la configuración');
        }
    });

    // Actualizar en cada cambio de input
    inputs?.forEach(input => {
        input.addEventListener('input', updatePlanner);
    });

    // Actualizar al cargar la página
    document.addEventListener('DOMContentLoaded', updatePlanner);
</script>