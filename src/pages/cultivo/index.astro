---
import Layout from '../../layouts/DashboardLayout.astro';
import { supabase } from '../../lib/supabase';
import { authenticate } from '../../lib/auth';
import CreateCultivo from '../../components/cultivos/CreateCultivo.astro';
import CultivosList from '../../components/cultivos/CultivosList.jsx';
// Autenticar al usuario sin redireccionar
const { user, redirect } = await authenticate(Astro);
if (redirect) {
    return Astro.redirect(redirect);
}

// Obtener los datos del c칩digo QR asociados al usuario (solo si est치 autenticado)
let cultivos_data = [];
if (user) {
  const { data } = await supabase
    .from("cultivos")
    .select("*")
    .eq("uuid", user.id);
  cultivos_data = data || [];
}

const cultivosCount = cultivos_data.length;
console.log(cultivos_data);

---

<Layout title="Cultivos">
    <!-- Breadcrumbs navigation -->
    <div class="container mx-auto px-2 pb-2 md:pb-4">
        <nav class="flex mb-4" aria-label="Breadcrumb">
            <ol class="inline-flex items-center space-x-1 md:space-x-3">
                <li class="inline-flex items-center">
                <a href="/dashboard" class="inline-flex items-center text-sm font-medium text-gray-700 hover:text-blue-600">
                    <svg class="w-3 h-3 mr-2.5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                        <path d="m19.707 9.293-2-2-7-7a1 1 0 0 0-1.414 0l-7 7-2 2a1 1 0 0 0 1.414 1.414L2 10.414V18a2 2 0 0 0 2 2h3a1 1 0 0 0 1-1v-4a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v4a1 1 0 0 0 1 1h3a2 2 0 0 0 2-2v-7.586l.293.293a1 1 0 0 0 1.414-1.414Z"/>
                    </svg>
                    Dashboard
                </a>
            </li>
            <li aria-current="page">
                <div class="flex items-center">
                    <svg class="w-3 h-3 text-gray-400 mx-1" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
                    </svg>
                    <span class="ml-1 text-sm font-medium text-gray-500 md:ml-2">Cultivo</span>
                </div>
            </li>
        </ol>
    </nav>
    
    <div class="relative space-y-6">
        <!-- Header section with title and create button -->
        <div class="flex justify-between items-center mb-8">
            <h1 class="text-2xl font-bold text-gray-800">Mis Cultivos</h1>
            <CreateCultivo />

        </div>

        <!-- Componente React para la lista de cultivos -->
        <CultivosList client:load cultivos={cultivos_data} />
    </div>

    <!-- Delete Modal with improved design -->
    <div id="deleteModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50 hidden">
        <div class="bg-white p-8 rounded-xl shadow-xl w-full max-w-md">
            <h3 class="text-xl font-bold mb-4 text-gray-800">Confirmar eliminaci칩n</h3>
            <p class="text-sm text-gray-600 mb-6">
                Escribe "DELETE" para confirmar la eliminaci칩n del cultivo
            </p>
            <input 
                type="text" 
                id="deleteConfirmInput"
                class="w-full px-4 py-2 border border-gray-300 rounded-lg mb-6 focus:outline-none focus:ring-2 focus:ring-red-500"
                placeholder="Escribe DELETE"
            />
            <div class="flex justify-end gap-3">
                <button
                    onclick="closeDeleteModal()"
                    class="px-6 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 font-medium transition-colors"
                >
                    Cancelar
                </button>
                <button
                    id="confirmDeleteButton"
                    class="px-6 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 font-medium transition-colors"
                >
                    Eliminar
                </button>
            </div>
        </div>
    </div>
    </div>
</Layout>

<script is:inline>
    document.addEventListener('DOMContentLoaded', () => {
        // Get DOM elements
        const searchInput = document.getElementById('search-input');
        const deleteModal = document.getElementById('deleteModal');
        const deleteConfirmInput = document.getElementById('deleteConfirmInput');
        const confirmDeleteButton = document.getElementById('confirmDeleteButton');
        let currentSessionId = null;

        // Solo configura el buscador si los elementos existen
        if (searchInput && document.getElementById('session-list')) {
            const sessionList = document.getElementById('session-list');
            const sessions = [...sessionList.querySelectorAll('li')];
            
            searchInput.addEventListener('input', (e) => {
                const query = e.target.value.toLowerCase();
                sessions.forEach((session) => {
                    const sessionName = session.getAttribute('data-session-name');
                    session.style.display = sessionName.includes(query) ? 'block' : 'none';
                });
            });
        }

        // Funciones del modal
        window.showDeleteModal = function(sessionId) {
            console.log('Showing modal for session:', sessionId);
            currentSessionId = sessionId;
            deleteModal.classList.remove('hidden');
            deleteConfirmInput.value = '';
            confirmDeleteButton.disabled = true;
        }

        window.closeDeleteModal = function() {
            deleteModal.classList.add('hidden');
            currentSessionId = null;
        }

        deleteConfirmInput.addEventListener('input', (e) => {
            confirmDeleteButton.disabled = e.target.value !== 'DELETE';
        });

        confirmDeleteButton.addEventListener('click', async () => {
            if (deleteConfirmInput.value === 'DELETE' && currentSessionId) {
                try {
                    console.log('Attempting to delete session:', currentSessionId);
                    const response = await fetch(`/api/cultivos/crear-cultivo?id=${currentSessionId}`, {
                        method: 'DELETE'
                    });

                    const result = await response.json();
                    if (result.success) {
                        closeDeleteModal();
                        // Reload the page to reflect the updated data
                        window.location.reload();
                    } else {
                        alert('Error: ' + result.error);
                    }
                } catch (error) {
                    console.error('Error deleting:', error);
                    alert('Error de red: ' + error.message);
                }
            }
        });
    });
</script>

<style>
    .bg-custom-green {
        background-color: #2A9D8F;
    }
    .bg-custom-green-dark {
        background-color: #247B6F;
    }
    .text-custom-green {
        color: #2A9D8F;
    }
</style>