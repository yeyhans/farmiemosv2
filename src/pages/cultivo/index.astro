---
import Layout from '../../layouts/Layout.astro';
import { supabase } from '../../lib/supabase';
import { authenticate } from '../../lib/auth';
import CreateCultivo from '../../components/cultivos/CreateCultivo.astro';
// Autenticar al usuario sin redireccionar
const { user, redirect } = await authenticate(Astro);
if (redirect) {
    return Astro.redirect(redirect);
}

// Obtener los datos del c칩digo QR asociados al usuario (solo si est치 autenticado)
let cultivos_data = [];
if (user) {
  const { data } = await supabase
    .from("cultivos")
    .select("*")
    .eq("uuid", user.id);
  cultivos_data = data || [];
}

const cultivosCount = cultivos_data.length;

---

<Layout title="Cultivos">
    <!-- Search and Session List -->
<div class="relative space-y-4">
    <!-- Add Session Button -->
     <div class="absolute top-0 right-0 flex items-center justify-center gap-1 bg-custom-green hover:bg-green-600 text-white font-medium text-sm rounded transition-colors">
     <CreateCultivo />
    </div>
    
   
  
    <!-- Search Bar -->
    <div class="mb-2">
      <input
        id="search-input"
        type="text"
        placeholder="Buscar sesiones..."
        class="px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-green-500"
      />
    </div>
  
    <div class="session-count">
      <p class="text-lg font-semibold">
        Total de cultivos: <span class="text-green-500">{cultivosCount}</span>
      </p>
    </div>
    
  
    <ul class="space-y-4">
        {cultivos_data.map((cultivo) => (
            <li key={cultivo.id} class="bg-white p-4 rounded-lg shadow-md hover:shadow-lg transition-shadow">
                <div class="flex justify-between items-center">
                    <a href={`/cultivo/${cultivo.id}`} class="text-lg font-medium text-gray-800 hover:text-custom-green transition-colors">
                        Cultivo: {cultivo.id}
                    </a>
                    <button
                        onclick={`showDeleteModal('${cultivo.id}')`}
                        class="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded-md text-sm transition-colors"
                    >
                        Eliminar
                    </button>
                </div>
            </li>
        ))}
    </ul>
  
  </div>
  
  <div id="deleteModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50 hidden">
    <div class="bg-white p-6 rounded-lg shadow-xl w-full max-w-sm">
        <h3 class="text-lg font-bold mb-4">Confirmar eliminaci칩n</h3>
        <p class="text-sm text-gray-600 mb-4">
            Escribe "DELETE" para confirmar la eliminaci칩n del cultivo
        </p>
        <input 
            type="text" 
            id="deleteConfirmInput"
            class="w-full px-3 py-2 border border-gray-300 rounded mb-4 focus:outline-none focus:ring-2 focus:ring-red-500"
            placeholder="Escribe DELETE"
        />
        <div class="flex justify-end gap-2">
            <button
                onclick="closeDeleteModal()"
                class="px-4 py-2 bg-gray-200 rounded hover:bg-gray-300"
            >
                Cancelar
            </button>
            <button
                id="confirmDeleteButton"
                class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
            >
                Eliminar
            </button>
        </div>
    </div>
</div>

<script is:inline>
    document.addEventListener('DOMContentLoaded', () => {
        // Get DOM elements
        const searchInput = document.getElementById('search-input');
        const deleteModal = document.getElementById('deleteModal');
        const deleteConfirmInput = document.getElementById('deleteConfirmInput');
        const confirmDeleteButton = document.getElementById('confirmDeleteButton');
        let currentSessionId = null;

        // Solo configura el buscador si los elementos existen
        if (searchInput && document.getElementById('session-list')) {
            const sessionList = document.getElementById('session-list');
            const sessions = [...sessionList.querySelectorAll('li')];
            
            searchInput.addEventListener('input', (e) => {
                const query = e.target.value.toLowerCase();
                sessions.forEach((session) => {
                    const sessionName = session.getAttribute('data-session-name');
                    session.style.display = sessionName.includes(query) ? 'block' : 'none';
                });
            });
        }

        // Funciones del modal
        window.showDeleteModal = function(sessionId) {
            console.log('Showing modal for session:', sessionId);
            currentSessionId = sessionId;
            deleteModal.classList.remove('hidden');
            deleteConfirmInput.value = '';
            confirmDeleteButton.disabled = true;
        }

        window.closeDeleteModal = function() {
            deleteModal.classList.add('hidden');
            currentSessionId = null;
        }

        deleteConfirmInput.addEventListener('input', (e) => {
            confirmDeleteButton.disabled = e.target.value !== 'DELETE';
        });

        confirmDeleteButton.addEventListener('click', async () => {
            if (deleteConfirmInput.value === 'DELETE' && currentSessionId) {
                try {
                    console.log('Attempting to delete session:', currentSessionId);
                    const response = await fetch(`/api/cultivos/crear-cultivo?id=${currentSessionId}`, {
                        method: 'DELETE'
                    });

                    const result = await response.json();
                    if (result.success) {
                        const elementToRemove = document.querySelector(`li[key="${currentSessionId}"]`);
                        if (elementToRemove) {
                            elementToRemove.remove();
                            // Actualizar el contador de cultivos
                            const countElement = document.querySelector('.text-green-500');
                            if (countElement) {
                                const currentCount = parseInt(countElement.textContent);
                                countElement.textContent = currentCount - 1;
                            }
                        }
                        closeDeleteModal();
                    } else {
                        alert('Error: ' + result.error);
                    }
                } catch (error) {
                    console.error('Error deleting:', error);
                    alert('Error de red: ' + error.message);
                }
            }
        });
    });
</script>
    


    </div>
</Layout>