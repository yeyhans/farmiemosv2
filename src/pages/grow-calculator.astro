---
import Interpretator from "../components/calculator/Interpretator.astro";
import Layout from "../layouts/Layout.astro";
import { authenticate } from "../lib/auth";
import { supabase } from "../lib/supabase";

const { user, redirect } = await authenticate(Astro);
if (redirect) {
    return Astro.redirect(redirect);
}

const { data: logs, error } = await supabase
  .from("calculator_logs")
  .select("*")
  .eq("user_id", user.id)
  .order("created_at", { ascending: false });

if (error) {
    console.error("Error al obtener registros:", error.message);
}
// Variables de paginaci√≥n
const recordsPerPage = 5; // Registros por p√°gina
let currentPage = 1;
const totalPages = Math.ceil(logs.length / recordsPerPage);

// Funci√≥n para obtener registros de la p√°gina actual
function getCurrentPageLogs() {
    const startIndex = (currentPage - 1) * recordsPerPage;
    const endIndex = startIndex + recordsPerPage;
    return logs.slice(startIndex, endIndex);
}
---

<Layout title="Calculadora">

    <div class="relative space-y-4">
       <!-- Contenedor de T√≠tulo y Descripci√≥n -->
        <div class="flex-1">
            <h1 class="text-2xl font-bold text-green-900">Farmiemos AI Calculator</h1>
            <p class="text-sm text-gray-600">
                Calcula el D√©ficit de Presi√≥n de Vapor (VPD) y el Punto de Roc√≠o (Dewpoint) de tu cultivo. Introduce tus 
                valores actuales de temperatura y humedad para llevar un registro de tus par√°metros y as√≠ obtener un an√°lisis 
                de tu ambiente permitiendo un control.
            </p>
        </div>

    <!-- Formulario de Entrada -->
    <form id="calculator-form" class="space-y-4">
        <div class="space-y-4">
            <div class="flex flex-col space-y-4 sm:flex-row sm:space-y-0 sm:space-x-4">
                <!-- Campo de temperatura -->
                <div class="flex-1">
                    <label for="tempInput" class="block text-sm font-medium text-gray-700">
                        Temperatura (¬∞C)
                    </label>
                    <input
                        type="number"
                        id="tempInput"
                        name="temp"
                        class="mt-1 block rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 sm:text-sm"
                        placeholder="Introduce la temperatura"
                        oninput="calcularValores()"
                    />
                </div>
        
                <!-- Campo de humedad -->
                <div class="flex-1">
                    <label for="humInput" class="block text-sm font-medium text-gray-700">
                        Humedad Relativa (%)
                    </label>
                    <input
                        type="number"
                        id="humInput"
                        name="humidity"
                        class="mt-1 block rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 sm:text-sm"
                        placeholder="Introduce la humedad relativa"
                        oninput="calcularValores()"
                    />
                </div>
            </div>
        </div>

            <!-- Resultados -->
    <div class="grid grid-cols-2 gap-4 mt-4">
        <div class="bg-blue-100 p-4 rounded-lg text-center">
            <h2 class="text-sm font-semibold">VPD (kPa)</h2>
            <p class="text-xs font-bold text-blue-700 " id="vpdResult">0.00</p>
        </div>

        <div class="bg-green-100 p-4 rounded-lg text-center">
            <h2 class="text-sm font-semibold">Dewpoint (¬∞C)</h2>
            <p class="text-xs font-bold text-green-700" id="dewpointResult">0.00</p>
        </div>
    </div>
        
        
    <div class="flex gap-2">
        <!-- Add Session Button -->
  <!-- Bot√≥n para registrar valores -->
  <button type="button" onclick="registrarValores()"
    class="flex items-center justify-center gap-1 bg-green-900 hover:bg-green-600 text-white font-medium text-sm py-2 px-3 rounded transition-colors"
  >
    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
    </svg>
    Registrar Valores
  </button>
  <button 
  id="openPopupBtn"
  type="button"
  class="flex items-center justify-center gap-1 bg-green-900 hover:bg-green-600 text-white font-medium text-sm py-2 px-3 rounded transition-colors"
  onclick="mostrarPopUp()">
  ü§ñ Interpretar
</button>





      </div>

    </form>


  
    <div id="logsContainer">
    <div  class="grid grid-cols-1 sm:grid-cols-5 lg:grid-cols-15  mt-4">
        {logs.map((log, index) => (
            <div 
                class="log-card p-2 border border-gray-300 shadow-md rounded-lg bg-white text-xs leading-tight"
                style="display: none;" 
            >
                <div class="mb-1">
                    <p class="text-gray-400">{log.recorded_at}</p>
                </div>
                <div class="mb-1 flex justify-between">
                    <strong class="text-gray-600">üå°Ô∏è :</strong>
                    <p class="text-green-800"><strong>{log.temp}</strong> ¬∞C</p>
                </div>
                <div class="mb-1 flex justify-between">
                    <strong class="text-gray-600">üíß :</strong>
                    <p class="text-green-800"><strong>{log.humidity}</strong> %</p>
                </div>
                <div class="mb-1 flex justify-between">
                    <strong class="text-gray-600">üí®:</strong>
                    <p class="text-blue-700"><strong>{log.vpd}</strong> kPa</p>
                </div>
                <div class="mb-1 flex justify-between">
                    <strong class="text-gray-600">üå°Ô∏è :</strong>
                    <p class="text-green-700"><strong>{log.dewpoint}</strong> ¬∞C</p>
                </div>
                <div class="mt-1 text-center">
                    <button 
                        class="text-white bg-red-500 hover:bg-red-600 px-2 py-1 rounded text-xs w-full" 
                        onclick={`eliminarRegistro('${log.id}')`}
                    >
                        Eliminar
                    </button>
                </div>
            </div>
        ))}

        
    </div>
        <!-- Botones de paginaci√≥n -->
        <div class="flex justify-center items-center mt-4 space-x-2">
            {Array.from({ length: totalPages }).map((_, index) => (
                <button 
                    class="pagination-button px-4 py-2 rounded bg-gray-200"
                    onclick={`cambiarPagina(${index + 1})`}
                >
                    {index + 1}
                </button>
            ))}
        </div>
    


    </div>

    
    

    
</div>

<script is:inline>
    let currentPage = 1; // Inicializa la p√°gina actual.
    const recordsPerPage = 5; // Registros por p√°gina.

    function cambiarPagina(page) {
        currentPage = page;
        renderCurrentPageLogs(); // Actualiza los registros en pantalla.
    }

    function renderCurrentPageLogs() {
        const logs = [...document.querySelectorAll('.log-card')];
        const startIndex = (currentPage - 1) * recordsPerPage;
        const endIndex = startIndex + recordsPerPage;

        // Oculta todos los registros.
        logs.forEach((log, index) => {
            log.style.display = index >= startIndex && index < endIndex ? 'block' : 'none';
        });

        // Actualiza el estilo activo de los botones de paginaci√≥n.
        document.querySelectorAll('.pagination-button').forEach((btn, index) => {
            btn.classList.toggle('bg-blue-500', index + 1 === currentPage);
            btn.classList.toggle('text-white', index + 1 === currentPage);
            btn.classList.toggle('bg-gray-200', index + 1 !== currentPage);
        });
    }

    document.addEventListener('DOMContentLoaded', renderCurrentPageLogs); // Inicializa al cargar.
</script>


<script is:inline>


    function calcularValores() {
        const temp = parseFloat(document.getElementById('tempInput').value);
        const hum = parseFloat(document.getElementById('humInput').value);

        if (isNaN(temp) || isNaN(hum) || hum < 0 || hum > 100) {
            return;
        }

        const a = 17.27, b = 237.7;
        const alpha = ((a * temp) / (b + temp)) + Math.log(hum / 100);
        const dewpoint = (b * alpha) / (a - alpha);
        const es = 0.6108 * Math.exp((a * temp) / (b + temp));  
        const ea = es * (hum / 100);                             
        const vpd = es - ea;                                      

        document.getElementById('vpdResult').textContent = vpd.toFixed(2);
        document.getElementById('dewpointResult').textContent = dewpoint.toFixed(2);
    }

    async function registrarValores() {
        const temp = parseFloat(document.getElementById('tempInput').value);
        const hum = parseFloat(document.getElementById('humInput').value);
        const vpd = parseFloat(document.getElementById('vpdResult').textContent);
        const dewpoint = parseFloat(document.getElementById('dewpointResult').textContent);

        const formData = new FormData();
        formData.append('temp', temp.toFixed(2));
        formData.append('humidity', hum.toFixed(2));
        formData.append('vpd', vpd.toFixed(2));
        formData.append('dewpoint', dewpoint.toFixed(2));
        formData.append('recorded_at', new Date().toISOString());

        try {
            const response = await fetch('/api/calculator', {
                method: 'POST',
                body: formData,
            });
            const result = await response.json();
            if (result.success) {
                alert('Datos registrados exitosamente.');
            } else {
                alert('Error: ' + result.error);
            }
        } catch (error) {
            alert('Error de red: ' + error.message);
        }
    }

    async function eliminarRegistro(id) {
        if (!confirm('¬øEst√°s seguro de que deseas eliminar este registro?')) return;

        try {
            const response = await fetch(`/api/calculator?id=${id}`, {
                method: 'DELETE'
            });
            const result = await response.json();
            if (result.success) {
                alert('Registro eliminado exitosamente.');
            } else {
                alert('Error: ' + result.error);
            }
        } catch (error) {
            alert('Error de red: ' + error.message);
        }
    }
</script>

<!-- PopUp (oculto por defecto) -->
<div 
    id="popupContainer" 
    class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
    
    <div class="bg-white rounded-lg p-4 shadow-lg max-w-lg w-full relative">
        <!-- Bot√≥n de Cierre -->
        <button 
            class="absolute top-2 right-2 text-red-600 hover:text-red-800 focus:outline-none"
            onclick="cerrarPopUp()">
            ‚úñ
        </button>
        
        <!-- Contenido del PopUp -->
        <div class="p-4">
            <Interpretator />
        </div>
    </div>
</div>

<script is:inline>
    // Mostrar el PopUp
    function mostrarPopUp() {
        document.getElementById('popupContainer').classList.remove('hidden');
    }

    // Ocultar el PopUp
    function cerrarPopUp() {
        document.getElementById('popupContainer').classList.add('hidden');
    }
</script>

</Layout>