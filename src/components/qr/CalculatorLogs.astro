---
import { authenticate } from "../../lib/auth";

interface LogEntry {
  id: string;
  timestamp: string;
  temp: number;
  humidity: number;
  vpd: number;
  dewpoint: number;
  notes: string;
  user_id?: string;
  created_at?: string;
}

const { user, redirect } = await authenticate(Astro);
if (redirect) {
    return Astro.redirect(redirect);
}



const { id, strain, qr } = Astro.props;

console.log(id);

// Ensure strain[0].bitacora exists and is an array
const bitacora = Array.isArray(strain?.[0]?.bitacora) ? strain[0].bitacora : [];

const logs = bitacora.map((log: LogEntry) => ({           
  id: strain[0].qr_id,
  timestamp: log.timestamp,
  temp: log.temp,
  humidity: log.humidity,
  vpd: log.vpd,
  dewpoint: log.dewpoint,
  notes: log.notes || "Sin notas"
}));

// Variables de paginaci√≥n
const recordsPerPage = 5; // Registros por p√°gina
let currentPage = 1;
const totalPages = Math.ceil(logs.length / recordsPerPage);

const formatDate = (isoDate) => {
  const date = new Date(isoDate);
  return date.toLocaleString("es-ES", {
    day: "2-digit",
    month: "2-digit",
    year: "2-digit",
    hour: "2-digit",
    minute: "2-digit",
    hour12: false,
  });
};



// Suponiendo que ya tienes definidas las variables `user` y `logs`
const currentUserId = user.id;

// Filtrar los logs del usuario actual
const userLogs = logs.filter((log: LogEntry) => log.user_id === currentUserId);


---


<div  id="logsContainer" class="grid grid-cols-1 sm:grid-cols-5 lg:grid-cols-15  mt-4">
    {logs.map((log: LogEntry, index: number) => (
        <div 
            class="log-card p-2 border border-gray-300 shadow-md rounded-lg bg-white text-xs leading-tight"
            style="display: none;" 
        >
            <div class="mb-1">
                <p class="text-gray-400">{formatDate(log.timestamp)}</p>
            </div>
            <div class="mb-1 flex justify-between">
                <strong class="text-gray-600">üå°Ô∏è :</strong>
                <p class="text-green-800"><strong>{log.temp}</strong> ¬∞C</p>
            </div>
            <div class="mb-1 flex justify-between">
                <strong class="text-gray-600">üíß :</strong>
                <p class="text-green-800"><strong>{log.humidity}</strong> %</p>
            </div>
            <div class="mb-1 flex justify-between">
                <strong class="text-gray-600">üí®:</strong>
                <p class="text-blue-700"><strong>{log.vpd}</strong> kPa</p>
            </div>
            <div class="mb-1 flex justify-between">
                <strong class="text-gray-600">üå°Ô∏è :</strong>
                <p class="text-green-700"><strong>{log.dewpoint}</strong> ¬∞C</p>
            </div>
            <div class="mt-1 flex w-full justify-between">
    <button 
    class="text-white bg-red-500 hover:bg-red-600 px-2 py-1 rounded text-xs w-3/4"
    onclick={`eliminarRegistro('${qr}', '${id}', '${log.timestamp}')`}
    >
    Eliminar
    </button>
    
    <button 
    class="px-2 py-1 rounded-full text-xs flex justify-center items-center text-left"
    onclick={`mostrarPopUpNotas('${qr}', '${id}', '${log.timestamp}', '${encodeURIComponent(log.notes || "Sin notas")}')`}
    >
    üìù
    </button>

    </div>


        </div>
    ))}
</div>


<div 
    id="popupNotasContainer" 
    class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
    <div class="bg-white rounded-lg p-4 shadow-lg max-w-lg w-full relative">
        <button 
            class="absolute top-2 right-2 text-red-600 hover:text-red-800 focus:outline-none"
            onclick="cerrarPopUpNotas()">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
        </button>
        
        <div class="p-4">
            <h2 class="text-lg font-semibold mb-2">Notas del Registro</h2>
            <div id="notasContenido" class="mt-2 p-3 bg-yellow-100 rounded-lg"></div>
            <textarea id="editarNotasTextarea" class="w-full h-32 p-2 border border-gray-300 rounded resize-none mt-4"></textarea>
            <div class="flex justify-end mt-4">
                <button id="guardarEdicionBtn" class="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600">
                    Guardar
                </button>
            </div>
        </div>
    </div>
</div>


<script is:inline>
    function mostrarPopUpNotas(id, qr, timestamp, notas) {
    const popupContainer = document.getElementById('popupNotasContainer');

    const notasContenido = document.getElementById('notasContenido');
    // Decodificar las notas (por si contienen caracteres especiales)
    const notasDecodificadas = decodeURIComponent(notas);
    // Insertar las notas en el contenido
    notasContenido.textContent = notasDecodificadas;
         
    const editarNotasTextarea = document.getElementById('editarNotasTextarea');



    // Insertar las notas en el contenido y en el textarea
    notasContenido.textContent = notasDecodificadas;
    editarNotasTextarea.value = notasDecodificadas;

    // Guardar los datos del registro en variables globales para usarlos al guardar
    window.currentQr = qr;
    window.currentId = id;
    window.currentTimestamp = timestamp;
    // Mostrar el popup
    popupContainer.classList.remove('hidden');
    }

    function cerrarPopUpNotas() {
    const popupContainer = document.getElementById('popupNotasContainer');
    popupContainer.classList.add('hidden');
    }


    document.getElementById('popupNotasContainer').addEventListener('click', function(e) {
    if (e.target === this) {
        cerrarPopUpNotas();
    }
    });

    document.getElementById('guardarEdicionBtn').addEventListener('click', function () {
    const editarNotasTextarea = document.getElementById('editarNotasTextarea');
    const nuevasNotas = editarNotasTextarea.value;

    const qr = window.currentQr;
    const id = window.currentId;
    const timestamp = window.currentTimestamp;

    fetch('/api/qr/calculator-bitacora', {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
             qr, id, timestamp,nuevasNotas
        }),
    })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('Notas actualizadas correctamente');
                window.location.reload();
            } else {
                alert('Error al actualizar las notas');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Ocurri√≥ un error al actualizar las notas');
        });
});

    function filterLogsByDate(selectedDate) {
        const logs = [...document.querySelectorAll('.log-card')];
        
        if (!selectedDate) {
            // Si no hay fecha seleccionada, mostrar todos los logs seg√∫n la paginaci√≥n actual
            renderCurrentPageLogs();
            return;
        }

        // Convertir la fecha seleccionada a inicio y fin del d√≠a
        const startDate = new Date(selectedDate);
        startDate.setHours(0, 0, 0, 0);
        const endDate = new Date(selectedDate);
        endDate.setHours(23, 59, 59, 999);

        logs.forEach(log => {
            const timestampText = log.querySelector('.text-gray-400').textContent;
            // Convertir el formato "DD/MM/YY, HH:mm" a Date
            const [datePart, timePart] = timestampText.split(', ');
            const [day, month, year] = datePart.split('/');
            const [hours, minutes] = timePart.split(':');
            
            // Crear fecha con el formato espa√±ol
            const logDate = new Date(
                2000 + parseInt(year), // A√±o completo (asumiendo 20XX)
                parseInt(month) - 1,   // Mes (0-11)
                parseInt(day),         // D√≠a
                parseInt(hours),       // Hora
                parseInt(minutes)      // Minutos
            );
            
            // Ocultar todos los logs que no sean de la fecha seleccionada
            if (logDate >= startDate && logDate <= endDate) {
                log.style.display = 'block';
            } else {
                log.style.display = 'none';
            }
        });

        // Recalcular la paginaci√≥n
        calcularTotalPages();
        renderPaginationButtons();
    }

    // Escuchar el evento dateSelected
    document.addEventListener('dateSelected', (event) => {
        const selectedDate = event.detail.date;
        filterLogsByDate(selectedDate);
    });
</script>


        <!-- Botones de paginaci√≥n -->
        <div class="flex justify-center items-center mt-4 space-x-2" id="pagination-container">
            {Array.from({ length: totalPages }).map((_, index) => (
            <button 
                class="pagination-button px-4 py-2 rounded bg-gray-200"
                onclick={`cambiarPagina(${index + 1})`}
            >
                {index + 1}
            </button>
            ))}
        </div>


        <script is:inline>
            let currentPage = 1; // P√°gina actual inicial.
            const recordsPerPage = 5; // Registros por p√°gina.
            let totalPages = 0; // Total de p√°ginas (se calcular√° din√°micamente).

            function calcularTotalPages() {
            const logs = [...document.querySelectorAll('.log-card')];
            totalPages = Math.ceil(logs.length / recordsPerPage); // Calcula el total de p√°ginas.
            }
            const buttonsPerPage = 5; // Botones visibles al mismo tiempo.
        
            function cambiarPagina(page) {
                currentPage = page;
                renderCurrentPageLogs(); // Actualiza los registros en pantalla.
                renderPaginationButtons(); // Actualiza los botones de paginaci√≥n.
            }
        
            function renderCurrentPageLogs() {
                const logs = [...document.querySelectorAll('.log-card')];
                const startIndex = (currentPage - 1) * recordsPerPage;
                const endIndex = startIndex + recordsPerPage;
        
                // Oculta todos los registros.
                logs.forEach((log, index) => {
                    log.style.display = index >= startIndex && index < endIndex ? 'block' : 'none';
                });
            }
        
            function renderPaginationButtons() {
                const container = document.getElementById('pagination-container');
                container.innerHTML = ''; // Limpia el contenedor antes de renderizar.
        
                // Calcula los l√≠mites del rango visible.
                const startButton = Math.max(1, currentPage - Math.floor(buttonsPerPage / 2));
                const endButton = Math.min(totalPages, startButton + buttonsPerPage - 1);
        
                for (let i = startButton; i <= endButton; i++) {
                    const button = document.createElement('button');
                    button.textContent = i;
                    button.className = `pagination-button px-4 py-2 rounded ${
                        i === currentPage ? 'bg-custom-blue text-white' : 'bg-gray-200'
                    }`;
                    button.onclick = () => cambiarPagina(i);
                    container.appendChild(button);
                }
        
                // Agrega flechas para navegar (opcional).
                if (currentPage > 1) {
                    const prevButton = document.createElement('button');
                    prevButton.textContent = '¬´';
                    prevButton.className = 'pagination-button px-4 py-2 rounded bg-gray-200';
                    prevButton.onclick = () => cambiarPagina(currentPage - 1);
                    container.prepend(prevButton);
                }
        
                if (currentPage < totalPages) {
                    const nextButton = document.createElement('button');
                    nextButton.textContent = '¬ª';
                    nextButton.className = 'pagination-button px-4 py-2 rounded bg-gray-200';
                    nextButton.onclick = () => cambiarPagina(currentPage + 1);
                    container.appendChild(nextButton);
                }
            }
        
            // Inicializa todo al cargar la p√°gina.
            document.addEventListener('DOMContentLoaded', () => {
                calcularTotalPages();
                renderCurrentPageLogs();
                renderPaginationButtons();
            });
        </script>
