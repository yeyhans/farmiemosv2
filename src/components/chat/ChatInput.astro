---
import { authenticate } from "../../lib/auth";

const { redirect } = await authenticate(Astro);

if (redirect) {
  return Astro.redirect(redirect);
}


const { id } = Astro.params;

import { marked } from 'marked';
---

 <style>
    .chat-container {
      display: flex;
      flex-direction: column;
      height: 90vh;
    }
    .messages-container {
      flex: 1;
      overflow-y: auto;
      padding: 1rem;
      padding-bottom: 5rem; /* Add padding to prevent content from hiding behind the input */
    }
    .input-container {
      position: fixed; /* Change from sticky to fixed */
      bottom: 0;
      left: 0;
      right: 0;
      background: white;
      padding: 1rem;
      border-top: 1px solid #e5e7eb;
      z-index: 10; /* Ensure it stays on top of other content */
      width: 100%;
    }
  </style>

 <section class="input-container">
    <form id="mastergrowForm" class="max-w-6xl mx-auto" enctype="multipart/form-data">
      <input type="hidden" name="sessionId" value={id} />
      <div class="flex flex-col sm:flex-row gap-4">
        <div class="flex-grow">
          <input 
            type="text" 
            name="prompt" 
            id="prompt" 
            placeholder="Ej. ¿Cómo puedo mejorar mis cultivos?" 
            required
            class="w-full border border-gray-300 rounded-lg p-2 focus:ring-2 focus:ring-green-300 focus:border-transparent"
          />
        </div>
        <div class="flex gap-2 items-end">
          <label class="flex items-center justify-center w-12 h-12 rounded-lg border border-gray-300 hover:bg-gray-50 cursor-pointer">
            <input type="file" name="file" id="file" accept="image/*" class="hidden">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
          </label>
          <button type="submit" class="w-12 h-12 bg-green-900 text-white rounded-lg hover:bg-green-700 transition duration-300 flex items-center justify-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
            </svg>
          </button>
        </div>
      </div>
    </form>
  </section>

<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
<script is:inline>

   // Definir variables globales
   const fileInput = document.querySelector('input[name="file"]');
  const imagePreviewContainer = document.createElement('div');
  imagePreviewContainer.className = 'mt-4';

  // Insertar el contenedor de la vista previa después del input de archivo
  if (fileInput) {
    fileInput.parentElement.appendChild(imagePreviewContainer);

    // Escuchar el evento de cambio en el input de archivo
    fileInput.addEventListener('change', (event) => {
      const file = event.target.files[0];
      if (file) {
        // Crear una URL temporal para la imagen
        const imageUrl = URL.createObjectURL(file);
        // Mostrar la imagen en el contenedor de vista previa
        imagePreviewContainer.innerHTML = `
          <img src="${imageUrl}" alt="Vista previa de la imagen" class="max-w-full h-auto rounded-lg shadow-sm" />
        `;
      } else {
        // Limpiar la vista previa si no hay archivo seleccionado
        imagePreviewContainer.innerHTML = '';
      }
    });
  } else {
    console.error("El input de archivo no fue encontrado.");
  }
  function scrollToBottom() {
    const messagesContainer = document.querySelector('.messages-container');
    if (!messagesContainer) {
      console.error('El contenedor .messages-container no existe.');
      return;
    }
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
  }

  document.addEventListener('DOMContentLoaded', function () {
    setTimeout(() => {
      scrollToBottom();
    }, 100);

  });

  let session = {
    ai_response: [], // Array para almacenar las respuestas del asistente
  };

  const form = document.getElementById('mastergrowForm');
  const conversationContainer = document.getElementById('conversationContainer');
  const profile = { user_name: "Tú" };
  let isStreaming = false;

  // Añadir un solo listener para todos los botones mediante delegación de eventos
  document.addEventListener('click', (event) => {
    const target = event.target.closest('button');
    if (!target) return;
    
    if (target.classList.contains('copy-btn')) {
      const index = parseInt(target.getAttribute('data-index'));
      copyToClipboard(index);
    } else if (target.classList.contains('like-btn')) {
      const index = parseInt(target.getAttribute('data-index'));
      handleFeedback(index, true);
    } else if (target.classList.contains('dislike-btn')) {
      const index = parseInt(target.getAttribute('data-index'));
      handleFeedback(index, false);
    }
  });

  form.addEventListener('submit', async (event) => {
    event.preventDefault();
    if (isStreaming) return;

    try {
      const formData = new FormData(form);
      const userPrompt = formData.get("prompt").toString();
      const imageFile = formData.get("file");

      // Limpiar inputs
      form.querySelector('#prompt').value = '';
      fileInput.value = '';
      imagePreviewContainer.innerHTML = '';

      // Mensaje del usuario
      let userMessageHtml = `
        <div>
          <div class="bg-gray-100 p-2 mt-2 rounded-lg">
            <strong class="text-green-800">${profile.user_name}:</strong> ${userPrompt}
          </div>
      `;

      if (imageFile && imageFile.size > 0) {
        const imageUrl = URL.createObjectURL(imageFile);
        userMessageHtml += `
          <div class="mt-2">
            <img src="${imageUrl}" alt="Imagen subida" class="rounded-lg shadow-sm max-w-[300px]">
          </div>
        `;
      }

      userMessageHtml += `</div>`;
      conversationContainer.insertAdjacentHTML('beforeend', userMessageHtml);

      // Elemento para la respuesta en tiempo real
      const assistantDiv = document.createElement('div');
      assistantDiv.className = 'bg-white p-4 mt-2 rounded-lg shadow-sm border border-gray-200';
      assistantDiv.innerHTML = `
        <div class="flex flex-col">
          <div class="flex-grow">
            <div class="flex items-center">
              <strong class="text-blue-600 font-semibold">Asistente:</strong>
            </div>
            <div class="typing-indicator">
              <span></span><span></span><span></span>
            </div>
            <div id="streamingText" class="markdown-content text-gray-800"></div>
          </div>
        </div>
      `;
      conversationContainer.appendChild(assistantDiv);
      scrollToBottom();

      isStreaming = true;
      const streamingText = assistantDiv.querySelector('#streamingText'); // Seleccionamos el contenedor
      let fullResponse = '';

      function updateStreamingText(newChunk) {
        fullResponse += newChunk;
        const markdownHTML = marked.parse(fullResponse); // Convertimos Markdown a HTML
        streamingText.innerHTML = markdownHTML; // Usamos innerHTML para mantener el formato
      }

      const res = await fetch('/api/chat/assistents', {
        method: 'POST',
        body: formData,
        credentials: 'include',
      });

      if (!res.ok) {
        const error = await res.text();
        throw new Error(error);
      }

      const reader = res.body.getReader();
      const decoder = new TextDecoder();

      while (true) {
        const { done, value } = await reader.read();
        if (done) break;
        const chunk = decoder.decode(value);

        // Actualizamos el texto en tiempo real
        updateStreamingText(chunk);

        // Remover indicador de typing solo si existe
        const typingIndicator = assistantDiv.querySelector('.typing-indicator');
        if (typingIndicator) {
          typingIndicator.remove();
        }

        scrollToBottom();
      }

      // Finalizar stream
      isStreaming = false;

      // Agregar botones de acciones después de completar la respuesta
      const responseIndex = session.ai_response.length;
      session.ai_response.push(fullResponse);
      
      const actionButtonsHTML = `
        <div class="flex justify-between items-center mt-4">
          <div class="sm:flex gap-2">
            <button
              class="copy-btn p-2 rounded-full hover:bg-blue-100 transition-colors duration-200"
              data-index="${responseIndex}"
              title="Copiar respuesta"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-blue-600" viewBox="0 0 20 20" fill="currentColor">
                <path d="M8 3a1 1 0 011-1h2a1 1 0 110 2H9a1 1 0 01-1-1z" />
                <path d="M6 3a2 2 0 00-2 2v11a2 2 0 002 2h8a2 2 0 002-2V5a2 2 0 00-2-2 3 3 0 01-3 3H9a3 3 0 01-3-3z" />
              </svg>
            </button>
            <button
              class="like-btn p-2 rounded-full hover:bg-green-100 transition-colors duration-200"
              data-index="${responseIndex}"
              title="Me gusta"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-green-600" viewBox="0 0 20 20" fill="currentColor">
                <path d="M2 10.5a1.5 1.5 0 113 0v6a1.5 1.5 0 01-3 0v-6zM6 10.333v5.43a2 2 0 001.106 1.79l.05.025A4 4 0 008.943 18h5.416a2 2 0 001.962-1.608l1.2-6A2 2 0 0015.56 8H12V4a2 2 0 00-2-2 1 1 0 00-1 1v.667a4 4 0 01-.8 2.4L6.8 7.933a4 4 0 00-.8 2.4z" />
              </svg>
            </button>
            <button
              class="dislike-btn p-2 rounded-full hover:bg-red-100 transition-colors duration-200"
              data-index="${responseIndex}"
              title="No me gusta"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-red-600" viewBox="0 0 20 20" fill="currentColor">
                <path d="M18 9.5a1.5 1.5 0 11-3 0v-6a1.5 1.5 0 013 0v6zM14 9.667v-5.43a2 2 0 00-1.105-1.79l-.05-.025A4 4 0 0011.055 2H5.64a2 2 0 00-1.962 1.608l-1.2 6A2 2 0 004.44 12H8v4a2 2 0 002 2 1 1 0 001-1v-.667a4 4 0 01.8-2.4l1.4-1.866a4 4 0 00.8-2.4z" />
              </svg>
            </button>
          </div>
        </div>
      `;

      // Agregar el contenedor para los botones a la respuesta del asistente
      assistantDiv.querySelector('.flex-col').insertAdjacentHTML('beforeend', actionButtonsHTML);

    } catch (error) {
      isStreaming = false;
      console.error('Error:', error);
      conversationContainer.insertAdjacentHTML('beforeend', `
        <div class="bg-red-100 p-4 mt-2 rounded-lg text-red-600">
          <strong>Error:</strong> ${error.message || 'Error en el servidor'}
        </div>
      `);
      scrollToBottom();
    }
  });

  // Update the copyToClipboard function to correctly handle streamed content
  async function copyToClipboard(index) {
    try {
      const textToCopy = session.ai_response[index];
      await navigator.clipboard.writeText(textToCopy);
      
      // Show confirmation
      const copyButton = document.querySelector(`.copy-btn[data-index="${index}"]`);
      if (!copyButton) return;
      
      const originalSvg = copyButton.innerHTML;
      
      // Temporarily change icon to a check
      copyButton.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-green-600" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
        </svg>
      `;
      
      // Restore original icon after 2 seconds
      setTimeout(() => {
        copyButton.innerHTML = originalSvg;
      }, 2000);
      
    } catch (error) {
      console.error('Error al copiar:', error);
      alert('Error al copiar al portapapeles');
    }
  }

  async function handleFeedback(index, isLiked) {
    try {
      const formData = new FormData();
      formData.append('index', index.toString());
      formData.append('isLiked', isLiked.toString());
      formData.append('sessionId', document.querySelector('input[name="sessionId"]').value);

      const response = await fetch('/api/chat/feedback', {
        method: 'POST',
        body: formData,
        credentials: 'include',
      });

      if (!response.ok) {
        throw new Error('Error al enviar feedback');
      }

      // Obtener los botones con los selectores actualizados
      const likeButton = document.querySelector(`.like-btn[data-index="${index}"]`);
      const dislikeButton = document.querySelector(`.dislike-btn[data-index="${index}"]`);

      if (!likeButton || !dislikeButton) return;

      // Deshabilitar ambos botones
      [likeButton, dislikeButton].forEach(button => {
        button.disabled = true;
        button.classList.add('opacity-50');
      });

      // Resaltar el botón seleccionado
      if (isLiked) {
        likeButton.classList.remove('opacity-50');
        likeButton.classList.add('bg-green-200');
      } else {
        dislikeButton.classList.remove('opacity-50');
        dislikeButton.classList.add('bg-red-200');
      }

    } catch (error) {
      console.error('Error:', error);
      alert('Error al enviar el feedback');
    }
  }
</script>