---
import { supabase } from '../../lib/supabase';

const { id } = Astro.params;

const { data: session } = await supabase
  .from("chats")
  .select("*")
  .eq("id", id)
  .single();

const { data: profile } = await supabase
  .from("profiles")
  .select("*")
  .eq("user_id", session.user_id)
  .single();

<<<<<<< HEAD

---



<!-- Main container that takes full viewport height -->

  <h1 class="text-center text-green-900 font-bold whitespace-nowrap" style="font-size: clamp(1rem, 5vw, 2rem);">
    {session.session_name} - Conversacion con la IA
  </h1>
  <!-- Chat messages section that fills available space -->
  <section class="flex-1 overflow-hidden">
    <div id="conversationContainer" class="h-[calc(100vh-200px)] overflow-y-auto p-4 space-y-4 scrollbar-thin scrollbar-thumb-gray-400 scrollbar-track-gray-100"> 
      {session.user_prompt.map((userPrompt, index) => ( 
        <div key={index}> 
          <div class="bg-gray-100 p-3 rounded-lg"> 
            <strong class="text-green-800">{profile.user_name}:</strong> {userPrompt} 
          </div> 
          {session.ai_response[index] && ( 
            <div class="bg-blue-100 p-4 mt-2 rounded-lg"> 
              <div class="flex justify-between items-start">
                <div class="flex-grow">
                  <strong>Asistente:</strong> {session.ai_response[index]}
                </div>
                <div class="flex gap-2 ml-4">
                  <button
                    onclick={`copyToClipboard(${index})`}
                    class="p-2 rounded-full hover:bg-blue-200 transition-colors"
                    title="Copiar respuesta"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-blue-600" viewBox="0 0 20 20" fill="currentColor">
                      <path d="M8 3a1 1 0 011-1h2a1 1 0 110 2H9a1 1 0 01-1-1z" />
                      <path d="M6 3a2 2 0 00-2 2v11a2 2 0 002 2h8a2 2 0 002-2V5a2 2 0 00-2-2 3 3 0 01-3 3H9a3 3 0 01-3-3z" />
                    </svg>
                  </button>
                  <button
                    onclick={`handleFeedback(${index}, true)`}
                    class="p-2 rounded-full hover:bg-green-200 transition-colors"
                    title="Me gusta"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-green-600" viewBox="0 0 20 20" fill="currentColor">
                      <path d="M2 10.5a1.5 1.5 0 113 0v6a1.5 1.5 0 01-3 0v-6zM6 10.333v5.43a2 2 0 001.106 1.79l.05.025A4 4 0 008.943 18h5.416a2 2 0 001.962-1.608l1.2-6A2 2 0 0015.56 8H12V4a2 2 0 00-2-2 1 1 0 00-1 1v.667a4 4 0 01-.8 2.4L6.8 7.933a4 4 0 00-.8 2.4z" />
                    </svg>
                  </button>
                  <button
                    onclick={`handleFeedback(${index}, false)`}
                    class="p-2 rounded-full hover:bg-red-200 transition-colors"
                    title="No me gusta"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-red-600" viewBox="0 0 20 20" fill="currentColor">
                      <path d="M18 9.5a1.5 1.5 0 11-3 0v-6a1.5 1.5 0 013 0v6zM14 9.667v-5.43a2 2 0 00-1.105-1.79l-.05-.025A4 4 0 0011.055 2H5.64a2 2 0 00-1.962 1.608l-1.2 6A2 2 0 004.44 12H8v4a2 2 0 002 2 1 1 0 001-1v-.667a4 4 0 01.8-2.4l1.4-1.866a4 4 0 00.8-2.4z" />
                    </svg>
                  </button>
                </div>
              </div>
            </div>
          )}
        </div> 
      ))} 
    </div>
  </section>

  <!-- Fixed footer with form -->
  <section class="bg-white border-t border-gray-200 py-4 px-4 shadow-lg" style="position:sticky"> 
    <form id="mastergrowForm" class="max-w-6xl mx-auto">
      <input type="hidden" name="sessionId" value={id} />
      <div class="flex flex-col sm:flex-row gap-4">
        <div class="flex-grow">
          <textarea 
            name="prompt" 
            id="prompt" 
            rows="2"
            placeholder="Ej. ¿Cómo puedo mejorar mis cultivos?" 
            required
            class="w-full border border-gray-300 rounded-lg p-2 focus:ring-2 focus:ring-green-300 focus:border-transparent resize-none"
          ></textarea>
        </div>
        <div class="flex gap-2 items-end">
          <label class="flex items-center justify-center w-12 h-12 rounded-lg border border-gray-300 hover:bg-gray-50 cursor-pointer">
            <input type="file" name="file" id="file" accept="image/*" class="hidden">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
          </label>
          <button type="submit" class="w-12 h-12 bg-green-900 text-white rounded-lg hover:bg-green-700 transition duration-300 flex items-center justify-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
            </svg>
=======

--- 


 <h1 class="text-center text-green-900 font-bold whitespace-normal text-2xl">
    {session.session_name} - Conversacion con la IA
  </h1>
  
  <!-- Chat Section -->
  <section class="w-full max-w-[90%] mx-auto flex-1">  
    <div id="conversationContainer" class="h-[calc(100vh-8rem)] p-3 bg-white rounded-xl shadow-lg scrollbar-thin scrollbar-thumb-gray-400 scrollbar-track-gray-100"> 
      {session.user_prompt.map((userPrompt, index) => ( 
        <div key={index} class="flex flex-col gap-3"> 
          <div class="bg-gray-100 p-3 rounded-lg max-w-[85%] self-end"> 
            <div class="text-base">{userPrompt}</div>
          </div> 
          
          {session.ai_response[index] && ( 
            <div class="bg-blue-100 p-3 rounded-lg max-w-[85%]">  
              <div class="text-base">{session.ai_response[index]}</div>
            </div> 
          )} 
        </div> 
      ))} 
    </div> 
  </section>

  <!-- Form Section -->
  <section class="text-sm w-full max-w-[90%] mx-auto fixed bottom-0 left-0 right-0 px-2"> 
    <form id="mastergrowForm" class="bg-white p-3 rounded-t-lg shadow-md border-t border-gray-200">
      <input type="hidden" name="sessionId" value={id} />
      
      <div class="flex gap-3">
        <div class="flex-1">
          <textarea 
            name="prompt" 
            id="prompt" 
            placeholder="Ingresa tu pregunta..." 
            required 
            class="w-full border border-gray-300 rounded p-2 focus:ring focus:ring-green-300 text-sm"
            rows="1"
          ></textarea>
        </div>

        <div class="flex gap-2 items-center">
          <input 
            type="file" 
            name="file" 
            id="file" 
            accept="image/*" 
            class="w-32 text-xs border border-gray-300 rounded p-1 focus:ring focus:ring-green-300"
          >

          <button 
            type="submit" 
            class="bg-green-900 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition duration-300 text-sm"
          >
            Enviar
>>>>>>> 26ab1b1fbe321d34f36ec9e11cf145c20e2d60a5
          </button>
        </div>
      </div>
    </form>
  </section>

<<<<<<< HEAD

<script is:inline>
  async function copyToClipboard(index) {
  try {
    // Obtener todas las respuestas del asistente
    const responses = document.querySelectorAll('.bg-blue-100');
    // Obtener el texto de la respuesta específica
    const textToCopy = responses[index].textContent.replace('Asistente:', '').trim();
    
    await navigator.clipboard.writeText(textToCopy);
    
    // Mostrar mensaje de confirmación
    const copyButton = responses[index].querySelector('button[title="Copiar respuesta"]');
    const originalSvg = copyButton.innerHTML;
    
    // Cambiar temporalmente el icono a un check
    copyButton.innerHTML = `
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-green-600" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
      </svg>
    `;
    
    // Restaurar el icono original después de 2 segundos
    setTimeout(() => {
      copyButton.innerHTML = originalSvg;
    }, 2000);
    
  } catch (error) {
    console.error('Error al copiar:', error);
    alert('Error al copiar al portapapeles');
  }
}

async function loadFeedbackStatus() {
  try {
    const sessionId = document.querySelector('input[name="sessionId"]').value;
    const formData = new FormData();
    formData.append('sessionId', sessionId);

    const response = await fetch('/api/chat/feedback-status', {
      method: 'POST',
      body: formData,
      credentials: 'include',
    });

    if (!response.ok) {
      throw new Error('Error al cargar el estado de feedback');
    }

    const { feedbacks } = await response.json();
    
    // Aplicar estados guardados
    feedbacks.forEach(feedback => {
      const feedbackButtons = document.querySelectorAll(`button[onclick="handleFeedback(${feedback.message_index}, true)"], button[onclick="handleFeedback(${feedback.message_index}, false)"]`);
      
      if (feedback.is_liked === 1) {
        // Resaltar el botón de "me gusta"
        feedbackButtons[0].classList.add('bg-green-200');
        // Deshabilitar ambos botones
        feedbackButtons.forEach(button => {
          button.disabled = true;
          if (button !== feedbackButtons[0]) {
            button.classList.add('opacity-50');
          }
        });
      } else if (feedback.is_liked === 0) {
        // Resaltar el botón de "no me gusta"
        feedbackButtons[1].classList.add('bg-red-200');
        // Deshabilitar ambos botones
        feedbackButtons.forEach(button => {
          button.disabled = true;
          if (button !== feedbackButtons[1]) {
            button.classList.add('opacity-50');
          }
        });
      }
    });
  } catch (error) {
    console.error('Error al cargar el estado de feedback:', error);
  }
}

// Cargar el estado inicial cuando se carga la página
document.addEventListener('DOMContentLoaded', loadFeedbackStatus);

// Función handleFeedback actualizada
async function handleFeedback(index, isLiked) {
  try {
    const formData = new FormData();
    formData.append('index', index.toString());
    formData.append('isLiked', isLiked.toString());
    formData.append('sessionId', document.querySelector('input[name="sessionId"]').value);

    const response = await fetch('/api/chat/feedback', {
      method: 'POST',
      body: formData,
      credentials: 'include',
    });

    if (!response.ok) {
      throw new Error('Error al enviar feedback');
    }

    // Obtener los botones
    const likeButton = document.querySelector(`button[onclick="handleFeedback(${index}, true)"]`);
    const dislikeButton = document.querySelector(`button[onclick="handleFeedback(${index}, false)"]`);

    // Deshabilitar ambos botones
    [likeButton, dislikeButton].forEach(button => {
      button.disabled = true;
      button.classList.add('opacity-50');
    });

    // Resaltar el botón seleccionado
    if (isLiked) {
      likeButton.classList.remove('opacity-50');
      likeButton.classList.add('bg-green-200');
    } else {
      dislikeButton.classList.remove('opacity-50');
      dislikeButton.classList.add('bg-red-200');
    }

  } catch (error) {
    console.error('Error:', error);
    alert('Error al enviar el feedback');
  }
}
</script>
=======
>>>>>>> 26ab1b1fbe321d34f36ec9e11cf145c20e2d60a5

<script is:inline>
  const form = document.getElementById('mastergrowForm');
  const conversationContainer = document.getElementById('conversationContainer');
  const profile = { user_name: "Tú" }; 

  form.addEventListener('submit', async (event) => {
    event.preventDefault();

    try {
      const formData = new FormData(form);
      const userPrompt = formData.get("prompt").toString(); 

      // Limpiar el textarea después del envío
      form.querySelector('#prompt').value = '';

      // Agregar el mensaje del usuario inmediatamente
      const userMessageHtml = `
        <div>
          <div class="bg-gray-100 p-2 mt-2 rounded-lg">
            <strong class="text-green-800">${profile.user_name}:</strong> ${userPrompt}
          </div>
        </div>
      `;
      
      // Agregar el mensaje del usuario al contenedor
      conversationContainer.insertAdjacentHTML('beforeend', userMessageHtml);

      // Mostrar indicador de carga
      const loadingDiv = document.createElement('div');
      loadingDiv.className = 'bg-blue-50 p-4 mt-2 rounded-lg';
      loadingDiv.innerHTML = '<strong>Asistente:</strong> Escribiendo...';
      conversationContainer.appendChild(loadingDiv);

      // Hacer scroll al fondo
      conversationContainer.scrollTop = conversationContainer.scrollHeight;

      const res = await fetch('/api/chat/assistents', {
        method: 'POST',
        body: formData,
        credentials: 'include',
      });

      if (!res.ok) {
        const errorText = await res.text();
        console.error('Error al llamar /api/chat/assistents:', res.status, errorText);
        
        // Reemplazar el indicador de carga con el mensaje de error
        loadingDiv.className = 'bg-red-100 p-4 mt-2 rounded-lg text-red-600';
        loadingDiv.innerHTML = `<strong>Error:</strong> ${res.status} - ${errorText}`;
        return;
      }

      const data = await res.json();
      
      // Verificar que la respuesta contiene los datos necesarios
      if (data && data.response && data.response.aiResponse) {
        // Reemplazar el indicador de carga con la respuesta real
        loadingDiv.className = 'bg-blue-100 p-4 mt-2 rounded-lg';
        loadingDiv.innerHTML = `<strong>Asistente:</strong> <div id="assistant-response">${data.response.aiResponse}</div>
                <div class="mt-2 border-t border-gray-200 pt-2"> 
              <button 
              class="bg-green-500 text-white px-2 py-1 rounded hover:bg-green-600 transition"
              onclick="handleFeedback('like', {index})"
            >
              👍
            </button>
            <button 
              class="bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600 transition"
              onclick="handleFeedback('dislike', {index})"
            >
              👎
            </button>
            <button class="bg-gray-200 text-gray-700 px-3 py-1 rounded hover:bg-gray-300 transition"
            onclick="copiarTexto()">
              📋
            </button> 
            </div>`;
      } else {
        throw new Error('Respuesta inválida del servidor');
      }

      // Hacer scroll al fondo después de recibir la respuesta
      conversationContainer.scrollTop = conversationContainer.scrollHeight;
      
    } catch (error) {
      console.error('Error en fetch:', error);
      // Mostrar error en la UI
      conversationContainer.insertAdjacentHTML('beforeend', `
        <div class="bg-red-100 p-4 mt-2 rounded-lg text-red-600">
          <strong>Error:</strong> ${error.message || 'Error inesperado al llamar la API.'}
        </div>
      `);
    }
  });

  // Función para hacer scroll automático
  function scrollToBottom() {
    conversationContainer.scrollTop = conversationContainer.scrollHeight;
  }

  // Hacer scroll inicial al cargar la página
  scrollToBottom();


  //Script para copiar los textos
  function copiarTexto() {
    // Seleccionamos el elemento con el ID "texto-a-copiar"// Suponiendo que data.response.id contiene un valor válido

    var textoACopiar = document.getElementById('.assistant-response');
    // Creamos un nuevo elemento temporal para almacenar el texto
    var tempInput = document.createElement("input");

    // Asignamos el texto a copiar al valor del elemento temporal
    tempInput.value = textoACopiar.textContent;

    // Agregamos el elemento temporal al documento
    document.body.appendChild(tempInput);

    // Seleccionamos el texto del elemento temporal
    tempInput.select();
    document.execCommand("copy");

    // Eliminamos el elemento temporal
    document.body.removeChild(tempInput);

    // Opcional: Mostrar un mensaje de confirmación al usuario
    alert("¡Texto copiado al portapapeles!");
}
</script>


