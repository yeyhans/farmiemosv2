---
import { supabase } from '../../lib/supabase';

const { id } = Astro.params;

const { data: session } = await supabase
  .from("chats")
  .select("*")
  .eq("id", id)
  .single();

const { data: profile } = await supabase
  .from("profiles")
  .select("*")
  .eq("user_id", session.user_id)
  .single();


--- 


 <h1 class="text-center text-green-900 font-bold whitespace-normal text-2xl">
    {session.session_name} - Conversacion con la IA
  </h1>
  
  <!-- Chat Section -->
  <section class="w-full max-w-[90%] mx-auto flex-1">  
    <div id="conversationContainer" class="h-[calc(100vh-8rem)] p-3 bg-white rounded-xl shadow-lg scrollbar-thin scrollbar-thumb-gray-400 scrollbar-track-gray-100"> 
      {session.user_prompt.map((userPrompt, index) => ( 
        <div key={index} class="flex flex-col gap-3"> 
          <div class="bg-gray-100 p-3 rounded-lg max-w-[85%] self-end"> 
            <div class="text-base">{userPrompt}</div>
          </div> 
          
          {session.ai_response[index] && ( 
            <div class="bg-blue-100 p-3 rounded-lg max-w-[85%]">  
              <div class="text-base">{session.ai_response[index]}</div>
            </div> 
          )} 
        </div> 
      ))} 
    </div> 
  </section>

  <!-- Form Section -->
  <section class="text-sm w-full max-w-[90%] mx-auto fixed bottom-0 left-0 right-0 px-2"> 
    <form id="mastergrowForm" class="bg-white p-3 rounded-t-lg shadow-md border-t border-gray-200">
      <input type="hidden" name="sessionId" value={id} />
      
      <div class="flex gap-3">
        <div class="flex-1">
          <textarea 
            name="prompt" 
            id="prompt" 
            placeholder="Ingresa tu pregunta..." 
            required 
            class="w-full border border-gray-300 rounded p-2 focus:ring focus:ring-green-300 text-sm"
            rows="1"
          ></textarea>
        </div>

        <div class="flex gap-2 items-center">
          <input 
            type="file" 
            name="file" 
            id="file" 
            accept="image/*" 
            class="w-32 text-xs border border-gray-300 rounded p-1 focus:ring focus:ring-green-300"
          >

          <button 
            type="submit" 
            class="bg-green-900 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition duration-300 text-sm"
          >
            Enviar
          </button>
        </div>
      </div>
    </form>
  </section>


<script is:inline>
  const form = document.getElementById('mastergrowForm');
  const conversationContainer = document.getElementById('conversationContainer');
  const profile = { user_name: "T√∫" }; 

  form.addEventListener('submit', async (event) => {
    event.preventDefault();

    try {
      const formData = new FormData(form);
      const userPrompt = formData.get("prompt").toString(); 

      // Limpiar el textarea despu√©s del env√≠o
      form.querySelector('#prompt').value = '';

      // Agregar el mensaje del usuario inmediatamente
      const userMessageHtml = `
        <div>
          <div class="bg-gray-100 p-2 mt-2 rounded-lg">
            <strong class="text-green-800">${profile.user_name}:</strong> ${userPrompt}
          </div>
        </div>
      `;
      
      // Agregar el mensaje del usuario al contenedor
      conversationContainer.insertAdjacentHTML('beforeend', userMessageHtml);

      // Mostrar indicador de carga
      const loadingDiv = document.createElement('div');
      loadingDiv.className = 'bg-blue-50 p-4 mt-2 rounded-lg';
      loadingDiv.innerHTML = '<strong>Asistente:</strong> Escribiendo...';
      conversationContainer.appendChild(loadingDiv);

      // Hacer scroll al fondo
      conversationContainer.scrollTop = conversationContainer.scrollHeight;

      const res = await fetch('/api/chat/assistents', {
        method: 'POST',
        body: formData,
        credentials: 'include',
      });

      if (!res.ok) {
        const errorText = await res.text();
        console.error('Error al llamar /api/chat/assistents:', res.status, errorText);
        
        // Reemplazar el indicador de carga con el mensaje de error
        loadingDiv.className = 'bg-red-100 p-4 mt-2 rounded-lg text-red-600';
        loadingDiv.innerHTML = `<strong>Error:</strong> ${res.status} - ${errorText}`;
        return;
      }

      const data = await res.json();
      
      // Verificar que la respuesta contiene los datos necesarios
      if (data && data.response && data.response.aiResponse) {
        // Reemplazar el indicador de carga con la respuesta real
        loadingDiv.className = 'bg-blue-100 p-4 mt-2 rounded-lg';
        loadingDiv.innerHTML = `<strong>Asistente:</strong> <div id="assistant-response">${data.response.aiResponse}</div>
                <div class="mt-2 border-t border-gray-200 pt-2"> 
              <button 
              class="bg-green-500 text-white px-2 py-1 rounded hover:bg-green-600 transition"
              onclick="handleFeedback('like', {index})"
            >
              üëç
            </button>
            <button 
              class="bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600 transition"
              onclick="handleFeedback('dislike', {index})"
            >
              üëé
            </button>
            <button class="bg-gray-200 text-gray-700 px-3 py-1 rounded hover:bg-gray-300 transition"
            onclick="copiarTexto()">
              üìã
            </button> 
            </div>`;
      } else {
        throw new Error('Respuesta inv√°lida del servidor');
      }

      // Hacer scroll al fondo despu√©s de recibir la respuesta
      conversationContainer.scrollTop = conversationContainer.scrollHeight;
      
    } catch (error) {
      console.error('Error en fetch:', error);
      // Mostrar error en la UI
      conversationContainer.insertAdjacentHTML('beforeend', `
        <div class="bg-red-100 p-4 mt-2 rounded-lg text-red-600">
          <strong>Error:</strong> ${error.message || 'Error inesperado al llamar la API.'}
        </div>
      `);
    }
  });

  // Funci√≥n para hacer scroll autom√°tico
  function scrollToBottom() {
    conversationContainer.scrollTop = conversationContainer.scrollHeight;
  }

  // Hacer scroll inicial al cargar la p√°gina
  scrollToBottom();


  //Script para copiar los textos
  function copiarTexto() {
    // Seleccionamos el elemento con el ID "texto-a-copiar"// Suponiendo que data.response.id contiene un valor v√°lido

    var textoACopiar = document.getElementById('.assistant-response');
    // Creamos un nuevo elemento temporal para almacenar el texto
    var tempInput = document.createElement("input");

    // Asignamos el texto a copiar al valor del elemento temporal
    tempInput.value = textoACopiar.textContent;

    // Agregamos el elemento temporal al documento
    document.body.appendChild(tempInput);

    // Seleccionamos el texto del elemento temporal
    tempInput.select();
    document.execCommand("copy");

    // Eliminamos el elemento temporal
    document.body.removeChild(tempInput);

    // Opcional: Mostrar un mensaje de confirmaci√≥n al usuario
    alert("¬°Texto copiado al portapapeles!");
}
</script>


