---
import { authenticate } from "../../lib/auth";
import { supabase } from "../../lib/supabase";

const { user, redirect } = await authenticate(Astro);
if (redirect) {
    return Astro.redirect(redirect);
}

const { data: logs, error } = await supabase
  .from("chats")
  .select("*")
  .eq("user_id", user.id)
  .order("created_at", { ascending: false });
  console.log('logs:', logs);

if (error) {
    console.error("Error al obtener sessions:", error.message);
}

const { data: profile, error: profileError } = await supabase
        .from("profiles")
        .select("*")
        .eq("user_id", user.id)
        .single();

      if (profileError || !profile) {

        return new Response(JSON.stringify({ success: false, error: "No se pudo obtener el perfil" }), {
            status: 500,
            headers: { "Content-Type": "application/json" },
            });
        }

const system_message = `
        El usuario se llama: ${profile.user_name}.
        Nivel de experiencia: ${profile.experience_level}.
        Comuna: ${profile.comuna}.
        Cultivo principal: ${profile.cultivo_principal}.
        Escala de cultivo: ${profile.escala_cultivo}.
        Motivaci√≥n: ${profile.motivacion}.
        Tama√±o espacio: ${profile.tamano_espacio}.
        Tipo suelo: ${profile.tipo_suelo}.
        Tipo iluminaci√≥n: ${profile.tipo_iluminacion}.
        Fuente riego: ${profile.fuente_riego}.
        Fertilizaci√≥n: ${profile.fertilizacion}.
        Control plagas: ${profile.control_plagas}.
        Frecuencia riego: ${profile.frecuencia_riego}.
        Problemas enfrentados: ${profile.problemas_enfrentados}.
        Objetivos mejora: ${profile.objetivos_mejora}.
        Inter√©s tecnolog√≠a: ${profile.interes_tecnologia}.

      `;
---


    <h1 class="text-2xl font-bold text-center text-green-900">Crear Sessiones</h1>




    <!-- Formulario de Entrada -->
    <form id="sessionsForm" class="space-y-4" action="/api/chat/sessions" method="POST">
        <div>
            <label class="block text-base font-medium text-green-900">Session Name:</label>
            <input type="text" id="session_name" name="session_name"
                   class="w-full p-2 border rounded" >
        </div>

        <div>
            <label class="block text-base font-medium text-green-700">Session Description:</label>
            <input type="text" id="session_description" name="session_description"
                   class="w-full p-2 border rounded" >
        </div>

        <div>
          <label class="block text-base font-medium text-green-700">Prompt System:</label>
          <input type="text" id="system_message" name="system_message" value ={system_message}
                 class="w-full p-2 border rounded" >
      </div>

        <!-- Bot√≥n para registrar -->
        <button type="submit"
                class="w-full bg-green-900 text-white py-2 rounded-lg hover:bg-green-700 transition duration-300">
            Registrar Valores
        </button>
    </form>



    <div class="grid grid-cols-1 sm:grid-cols-5 lg:grid-cols-15  mt-4">
        {logs.map((log, index) => (
            <div 
                class="log-card p-2 border border-gray-300 shadow-md rounded-lg bg-white text-xs leading-tight"
                style="display: none;" 
            >
                <div class="mb-1">
                    <p class="text-gray-400">{log.recorded_at}</p>
                </div>
                <div class="mb-1 flex justify-between">
                    <strong class="text-gray-600">üå°Ô∏è :</strong>
                    <p class="text-green-800"><strong>{log.session_name}</strong> ¬∞C</p>
                </div>
                <div class="mb-1 flex justify-between">
                    <strong class="text-gray-600">üíß :</strong>
                    <p class="text-green-800"><strong>{log.session_description}</strong> %</p>
                </div>
                <div class="mb-1 flex justify-between">
                    <strong class="text-gray-600">üí®:</strong>
                    <p class="text-blue-700"><strong>{log.system_message}</strong> kPa</p>
                </div>
                <div class="mt-1 text-center">
                    <button 
                        class="text-white bg-red-500 hover:bg-red-600 px-2 py-1 rounded text-xs w-full" 
                        onclick={`eliminarRegistro('${log.id}')`}
                    >
                        Eliminar
                    </button>
                </div>
            </div>
        ))}
    </div>
    




<script is:inline>

    const form = document.getElementById('sessionsForm');
    form.addEventListener("submit", async (e) =>{
        e.preventDefault(); // Evitar que se recargue la p√°gina
        const formData = new FormData(form);
        try {
            const response = await fetch(form.action, {
                method: "POST",
                body: formData,
            });
            const result = await response.json();
            if (result.success) {
                alert('Datos registrados exitosamente.');
                location.reload(); // Recargar la p√°gina
            } else {
                alert('Error: ' + result.error);
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Error de red: ' + error.message);
        }

    });



    async function registrarValores() {

        const session_name = parseFloat(document.getElementById('session_name').textContent);
        const system_message = parseFloat(document.getElementById('systemMessage').textContent);
        const session_description = parseFloat(document.getElementById('session_description').textContent);

        const formData = new FormData();
        formData.append('session_name', session_name.toFixed(2));
        formData.append('session_description', session_description.toFixed(2));
        formData.append('systemMessage', system_message.toFixed(2));
        formData.append('recorded_at', new Date().toISOString());

        try {
            const response = await fetch('/api/chat/sessions', {
                method: 'POST',
                body: formData,
            });
            const result = await response.json();
            if (result.success) {
                alert('Datos registrados exitosamente.');
                location.reload();
            } else {
                alert('Error: ' + result.error);
            }
        } catch (error) {
            alert('Error de red: ' + error.message);
        }
    }

    async function eliminarRegistro(id) {
        if (!confirm('¬øEst√°s seguro de que deseas eliminar este registro?')) return;

        try {
            const response = await fetch(`/api/sessions?id=${id}`, {
                method: 'DELETE'
            });
            const result = await response.json();
            if (result.success) {
                alert('Registro eliminado exitosamente.');
                location.reload();
            } else {
                alert('Error: ' + result.error);
            }
        } catch (error) {
            alert('Error de red: ' + error.message);
        }
    }
</script>
