---
import { authenticate } from "../../lib/auth";
import { supabase } from "../../lib/supabase";

const { user, redirect } = await authenticate(Astro);
if (redirect) {
    return Astro.redirect(redirect);
}

const { data: logs, error } = await supabase
  .from("chats")
  .select("*")
  .eq("user_id", user.id)
  .order("created_at", { ascending: false });

if (error) {
    console.error("Error al obtener sessions:", error.message);
}

const { data: profile, error: profileError } = await supabase
        .from("profiles")
        .select("*")
        .eq("user_id", user.id)
        .single();

      if (profileError || !profile) {

        return new Response(JSON.stringify({ success: false, error: "No se pudo obtener el perfil" }), {
            status: 500,
            headers: { "Content-Type": "application/json" },
            });
        }

const system_message = `
        El usuario se llama: ${profile.user_name}.
        Nivel de experiencia: ${profile.experience_level}.
        Comuna: ${profile.comuna}.
        Cultivo principal: ${profile.cultivo_principal}.
        Escala de cultivo: ${profile.escala_cultivo}.
        Motivación: ${profile.motivacion}.
        Tamaño espacio: ${profile.tamano_espacio}.
        Tipo suelo: ${profile.tipo_suelo}.
        Tipo iluminación: ${profile.tipo_iluminacion}.
        Fuente riego: ${profile.fuente_riego}.
        Fertilización: ${profile.fertilizacion}.
        Control plagas: ${profile.control_plagas}.
        Frecuencia riego: ${profile.frecuencia_riego}.
        Problemas enfrentados: ${profile.problemas_enfrentados}.
        Objetivos mejora: ${profile.objetivos_mejora}.
        Interés tecnología: ${profile.interes_tecnologia}.

      `;
---


    <h1 class="text-3xl font-bold text-center text-green-800 mb-6">Gestión de Sesiones</h1>

    <!-- Feedback Section -->
    <div id="feedbackMessage" class="hidden p-4 mb-4 rounded-lg"></div>

    <!-- Formulario de Entrada -->
    <div class="bg-white shadow-md p-6 rounded-lg">
        <h2 class="text-xl font-bold text-green-700 mb-4">Crear Nueva Sesión</h2>
        <form id="sessionsForm" action="/api/chat/sessions" method="POST" class="space-y-6">
            <!-- Session Name -->
            <div>
                <label for="session_name" class="block text-base font-medium text-green-800">Nombre de Sesión:</label>
                <input type="text" id="session_name" name="session_name"
                       class="w-full p-2 border border-green-300 rounded-md focus:ring focus:ring-green-500 focus:outline-none"
                       placeholder="Escribe el nombre de la sesión..." required>
            </div>

            <!-- Session Description -->
            <div>
                <label for="session_description" class="block text-base font-medium text-green-800">Descripción de Sesión:</label>
                <input type="text" id="session_description" name="session_description"
                       class="w-full p-2 border border-green-300 rounded-md focus:ring focus:ring-green-500 focus:outline-none"
                       placeholder="Escribe una breve descripción..." >
            </div>

            <!-- System Message -->
            <div>
                <label for="system_message" class="block text-base font-medium text-green-800">Prompt del Sistema:</label>
                <textarea id="system_message" name="system_message" rows="6"
                          class="w-full p-2 border border-green-300 rounded-md focus:ring focus:ring-green-500 focus:outline-none resize-none"
                          input="system_message" placeholder="Escribe el prompt del sistema..." required>{system_message}</textarea>
            </div>

            <!-- Botón para Registrar -->
            <button type="submit"
                    class="w-full bg-green-800 text-white py-2 rounded-lg hover:bg-green-600 transition duration-300 font-semibold">
                Registrar Sesión
            </button>
        </form>
    </div>

    <!-- Scripts -->
    <script is:inline>
        const feedbackMessage = document.getElementById('feedbackMessage');
        const form = document.getElementById('sessionsForm');

        form.addEventListener("submit", async (e) => {
            e.preventDefault(); // Evitar recarga
            const formData = new FormData(form);
            try {
                const response = await fetch(form.action, {
                    method: "POST",
                    body: formData,
                });
                const result = await response.json();
                feedbackMessage.classList.remove('hidden', 'bg-red-100', 'text-red-800');
                feedbackMessage.classList.add('bg-green-100', 'text-green-800');
                feedbackMessage.textContent = result.success
                    ? 'Datos registrados exitosamente.'
                    : 'Error: ' + result.error;
                if (result.success) setTimeout(() => location.reload(), 1000);
            } catch (error) {
                feedbackMessage.classList.remove('hidden', 'bg-green-100', 'text-green-800');
                feedbackMessage.classList.add('bg-red-100', 'text-red-800');
                feedbackMessage.textContent = 'Error de red: ' + error.message;
            }
        });


    </script>

