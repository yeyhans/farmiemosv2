---
import { authenticate } from "../../lib/auth";
import { supabase } from "../../lib/supabase";
import { marked } from "marked";


const { redirect, user } = await authenticate(Astro);

if (redirect) {
  return Astro.redirect(redirect);
}
const { data: profile } = await supabase
  .from("profiles")
  .select("*")
  .eq("user_id", user.id)
  .single();

const { id } = Astro.params;

const { data: session } = await supabase
  .from("chats")
  .select("*")
  .eq("id", id)
  .single();




---
<style>
    /* Agregar animación de typing */
    .typing-indicator span {
      display: inline-block;
      margin-right: 3px;
      background: #4b5563;
      border-radius: 50%;
      animation: typing 1.4s infinite ease-in-out;
    }
    
    .typing-indicator span:nth-child(2) { animation-delay: 0.2s; }
    .typing-indicator span:nth-child(3) { animation-delay: 0.4s; }
    
    @keyframes typing {
      0%, 100% { transform: translateY(0); }
      50% { transform: translateY(-5px); }
    }
    </style>




<section class="messages-container bg-gray-50 p-6 rounded-lg shadow-md">
  <div id="conversationContainer" class="space-y-6">
    {session?.user_prompt.map((userPrompt, index) => (
      <div key={index} class="space-y-4">
        <!-- Mensaje del usuario -->
        <div class="bg-gray-100 p-4 rounded-lg shadow-sm">
          <strong class="text-green-800 font-semibold">{profile.user_name}:</strong>
          <span class="ml-2 text-gray-700 whitespace-pre-wrap">{userPrompt}</span>
        </div>

        <!-- Respuesta del asistente -->
        {session.ai_response[index] ? (
          <div class="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
            <div class="flex flex-col">
              <div class="flex-grow">
                <div class="flex items-center">
                  <strong class="text-blue-600 font-semibold">Asistente:</strong>
                </div>

                <div class="text-gray-800">
                  {/* Mostrar el texto procesado como Markdown */}
                  <div class="markdown-content" set:html={marked(session.ai_response[index])}></div>
                </div>
              </div>

              <!-- Botones de acción -->
              <div class="flex justify-between items-center mt-4">
                <div class="sm:flex gap-2">
                  <!-- Botón Copiar -->
                  <button
                    onclick={`copyToClipboard(${index})`}
                    class="p-2 rounded-full hover:bg-blue-100 transition-colors duration-200"
                    title="Copiar respuesta"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-blue-600" viewBox="0 0 20 20" fill="currentColor">
                      <path d="M8 3a1 1 0 011-1h2a1 1 0 110 2H9a1 1 0 01-1-1z" />
                      <path d="M6 3a2 2 0 00-2 2v11a2 2 0 002 2h8a2 2 0 002-2V5a2 2 0 00-2-2 3 3 0 01-3 3H9a3 3 0 01-3-3z" />
                    </svg>
                  </button>
                  <!-- Botón Me gusta -->
                  <button
                    onclick={`handleFeedback(${index}, true)`}
                    class="p-2 rounded-full hover:bg-green-100 transition-colors duration-200"
                    title="Me gusta"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-green-600" viewBox="0 0 20 20" fill="currentColor">
                      <path d="M2 10.5a1.5 1.5 0 113 0v6a1.5 1.5 0 01-3 0v-6zM6 10.333v5.43a2 2 0 001.106 1.79l.05.025A4 4 0 008.943 18h5.416a2 2 0 001.962-1.608l1.2-6A2 2 0 0015.56 8H12V4a2 2 0 00-2-2 1 1 0 00-1 1v.667a4 4 0 01-.8 2.4L6.8 7.933a4 4 0 00-.8 2.4z" />
                    </svg>
                  </button>
                  <!-- Botón No me gusta -->
                  <button
                    onclick={`handleFeedback(${index}, false)`}
                    class="p-2 rounded-full hover:bg-red-100 transition-colors duration-200"
                    title="No me gusta"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-red-600" viewBox="0 0 20 20" fill="currentColor">
                      <path d="M18 9.5a1.5 1.5 0 11-3 0v-6a1.5 1.5 0 013 0v6zM14 9.667v-5.43a2 2 0 00-1.105-1.79l-.05-.025A4 4 0 0011.055 2H5.64a2 2 0 00-1.962 1.608l-1.2 6A2 2 0 004.44 12H8v4a2 2 0 002 2 1 1 0 001-1v-.667a4 4 0 01.8-2.4l1.4-1.866a4 4 0 00.8-2.4z" />
                    </svg>
                  </button>
                </div>

                
              </div>
            </div>
          </div>
        ) : (
          <div class="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
            <div class="flex flex-col">
              <div class="flex-grow space-y-2">
                <div class="text-gray-800 ">
                  {/* Indicador de carga */}
                  <span class="loading-dots">Cargando</span>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    ))}
  </div>
</section>



  

<script is:inline>
    async function copyToClipboard(index) {
    try {
      // Obtener todas las respuestas del asistente
      const responses = document.querySelectorAll('.bg-blue-100');
      // Obtener el texto de la respuesta específica
      const textToCopy = responses[index].textContent.replace('Asistente:', '').trim();
      
      await navigator.clipboard.writeText(textToCopy);
      
      // Mostrar mensaje de confirmación
      const copyButton = responses[index].querySelector('button[title="Copiar respuesta"]');
      const originalSvg = copyButton.innerHTML;
      
      // Cambiar temporalmente el icono a un check
      copyButton.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-green-600" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
        </svg>
      `;
      
      // Restaurar el icono original después de 2 segundos
      setTimeout(() => {
        copyButton.innerHTML = originalSvg;
      }, 2000);
      
    } catch (error) {
      console.error('Error al copiar:', error);
      alert('Error al copiar al portapapeles');
    }
  }
  
  async function loadFeedbackStatus() {
    try {
      const sessionId = document.querySelector('input[name="sessionId"]').value;
      const formData = new FormData();
      formData.append('sessionId', sessionId);
  
      const response = await fetch('/api/chat/feedback-status', {
        method: 'POST',
        body: formData,
        credentials: 'include',
      });
  
      if (!response.ok) {
        throw new Error('Error al cargar el estado de feedback');
      }
  
      const { feedbacks } = await response.json();
      
      // Aplicar estados guardados
      feedbacks.forEach(feedback => {
        const feedbackButtons = document.querySelectorAll(`button[onclick="handleFeedback(${feedback.message_index}, true)"], button[onclick="handleFeedback(${feedback.message_index}, false)"]`);
        
        if (feedback.is_liked === 1) {
          // Resaltar el botón de "me gusta"
          feedbackButtons[0].classList.add('bg-green-200');
          // Deshabilitar ambos botones
          feedbackButtons.forEach(button => {
            button.disabled = true;
            if (button !== feedbackButtons[0]) {
              button.classList.add('opacity-50');
            }
          });
        } else if (feedback.is_liked === 0) {
          // Resaltar el botón de "no me gusta"
          feedbackButtons[1].classList.add('bg-red-200');
          // Deshabilitar ambos botones
          feedbackButtons.forEach(button => {
            button.disabled = true;
            if (button !== feedbackButtons[1]) {
              button.classList.add('opacity-50');
            }
          });
        }
      });
    } catch (error) {
      console.error('Error al cargar el estado de feedback:', error);
    }
  }
  
  // Cargar el estado inicial cuando se carga la página
  document.addEventListener('DOMContentLoaded', loadFeedbackStatus);
  
  // Función handleFeedback actualizada
  async function handleFeedback(index, isLiked) {
    try {
      const formData = new FormData();
      formData.append('index', index.toString());
      formData.append('isLiked', isLiked.toString());
      formData.append('sessionId', document.querySelector('input[name="sessionId"]').value);
  
      const response = await fetch('/api/chat/feedback', {
        method: 'POST',
        body: formData,
        credentials: 'include',
      });
  
      if (!response.ok) {
        throw new Error('Error al enviar feedback');
      }
  
      // Obtener los botones
      const likeButton = document.querySelector(`button[onclick="handleFeedback(${index}, true)"]`);
      const dislikeButton = document.querySelector(`button[onclick="handleFeedback(${index}, false)"]`);
  
      // Deshabilitar ambos botones
      [likeButton, dislikeButton].forEach(button => {
        button.disabled = true;
        button.classList.add('opacity-50');
      });
  
      // Resaltar el botón seleccionado
      if (isLiked) {
        likeButton.classList.remove('opacity-50');
        likeButton.classList.add('bg-green-200');
      } else {
        dislikeButton.classList.remove('opacity-50');
        dislikeButton.classList.add('bg-red-200');
      }
  
    } catch (error) {
      console.error('Error:', error);
      alert('Error al enviar el feedback');
    }
  }
  
  
  </script>

  