---
import { supabase } from '../lib/supabase';

const { data, error } = await supabase.from("conversations").select('*');

---





<div class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-6">MasterGrow - Conversaciones con la IA</h1>
    
    <!-- Formulario para ingresar preguntas y subir imágenes -->
    <form id="mastergrowForm" class="bg-white p-6 rounded-lg shadow-lg space-y-4 max-w-xl mx-auto">
      <div>
        <label for="prompt" class="block text-lg font-semibold">Ingresa tu pregunta:</label>
        <textarea name="prompt" id="prompt" placeholder="Ej. ¿Cómo puedo mejorar mis cultivos?" required class="w-full border border-gray-300 rounded p-3 mt-1"></textarea>
      </div>

      <div>
        <label for="file" class="block text-lg font-semibold">Sube una imagen de la planta (opcional):</label>
        <input type="file" name="file" id="file" accept="image/*" class="w-full border border-gray-300 rounded p-3 mt-1" />
      </div>

      <button type="submit" class="bg-blue-500 text-white rounded p-3 w-full hover:bg-blue-600">Enviar</button>
    </form>

    <!-- Sección para mostrar mensajes del sistema, usuario, análisis y respuesta de la IA -->
    <section class="mt-8">
      <h2 class="text-2xl font-semibold mb-4">Historia de la Conversación</h2>

      <!-- Contenedor para mensajes de la conversación -->
      <div id="conversationContainer" class="space-y-4">
        <!-- Mensajes se agregarán dinámicamente aquí -->
      </div>
    </section>
  </div>

<script is:inline>
  const form = document.getElementById('mastergrowForm');
  const conversationContainer = document.getElementById('conversationContainer');
  let conversationHistory = [];

  form.addEventListener('submit', async (event) => {
    event.preventDefault();

    try {
      const formData = new FormData(form);
      const userPrompt = formData.get("prompt").toString(); // Obtener el prompt del usuario

      // Agregar el mensaje del usuario al historial de conversación
      conversationHistory.push({ role: 'user', content: userPrompt });

      // Mostrar el mensaje del usuario en el contenedor
      conversationContainer.innerHTML += `
        <div class="bg-gray-100 p-4 rounded-lg">
          <strong>Usuario:</strong> ${userPrompt}
        </div>
      `;
      
      // Añadir el historial completo a los datos que se enviarán al backend
      formData.append("conversationHistory", JSON.stringify(conversationHistory));

      const res = await fetch('/api/chat-mastergrow', {
        method: 'POST',
        body: formData,
        credentials: 'include',
      });

      if (!res.ok) {
        const errorText = await res.text();
        console.error('Error al llamar /api/chat-mastergrow:', res.status, errorText);
        conversationContainer.innerHTML += `
          <div class="bg-red-100 p-4 rounded-lg text-red-600">
            <strong>Error:</strong> ${res.status} - ${errorText}
          </div>
        `;
        return;
      }

      const data = await res.json();

      // Guardar la respuesta del asistente en el historial
      conversationHistory.push({ role: 'assistant', content: data.aiResponse });

      // Mostrar la respuesta de la IA en el contenedor
      conversationContainer.innerHTML += `
        <div class="bg-blue-100 p-4 rounded-lg">
          <strong>Asistente:</strong> ${data.aiResponse}
        </div>
      `;
      
      // Mostrar análisis de la imagen si existe
      if (data.imageAnalysis) {
        conversationContainer.innerHTML += `
          <div class="bg-green-100 p-4 rounded-lg">
            <strong>Análisis de la Imagen:</strong> ${data.imageAnalysis}
          </div>
        `;
      }

    } catch (error) {
      console.error('Error en fetch:', error);
      conversationContainer.innerHTML += `
        <div class="bg-red-100 p-4 rounded-lg text-red-600">
          <strong>Error:</strong> Error inesperado al llamar la API.
        </div>
      `;
    }
  });
  
</script>
