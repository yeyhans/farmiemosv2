---
import { authenticate } from "../../lib/auth";
import { supabase } from "../../lib/supabase";

const { user, redirect } = await authenticate(Astro);
if (redirect) {
    return Astro.redirect(redirect);
}

const { data: logs, error } = await supabase
  .from("calculator_logs")
  .select("*")
  .eq("user_id", user.id)
  .order("created_at", { ascending: false });

if (error) {
    console.error("Error al obtener registros:", error.message);
}
---

<div class="bg-white p-8 rounded-lg shadow-lg">
    <h1 class="text-2xl font-bold text-center text-blue-600">Calculadora VPD y Dewpoint</h1>

    <!-- Formulario de Entrada -->
    <form id="calculator-form" class="space-y-4">
        <div>
            <label class="block text-lg font-medium">Temperatura (°C)</label>
            <input type="number" id="tempInput" name="temp"
                   class="w-full p-2 border rounded" oninput="calcularValores()">
        </div>

        <div>
            <label class="block text-lg font-medium">Humedad Relativa (%)</label>
            <input type="number" id="humInput" name="humidity"
                   class="w-full p-2 border rounded" oninput="calcularValores()">
        </div>

        <!-- Botón para registrar -->
        <button type="button" onclick="registrarValores()"
                class="w-full bg-blue-500 text-white py-2 rounded-lg hover:bg-blue-700 transition duration-300">
            Registrar Valores
        </button>
    </form>

    <!-- Resultados -->
    <div class="grid grid-cols-2 gap-4 mt-4">
        <div class="bg-blue-100 p-4 rounded-lg text-center">
            <h2 class="text-lg font-semibold">VPD (kPa)</h2>
            <p class="text-xl font-bold text-blue-700" id="vpdResult">0.00</p>
        </div>

        <div class="bg-green-100 p-4 rounded-lg text-center">
            <h2 class="text-lg font-semibold">Dewpoint (°C)</h2>
            <p class="text-xl font-bold text-green-700" id="dewpointResult">0.00</p>
        </div>
    </div>

    <!-- Tabla de Registros -->
    <div class="mt-8">
        <h2 class="text-xl font-semibold text-gray-700 mb-4">Registros Previos</h2>
        <table class="w-full table-auto border-collapse border border-gray-200">
            <thead>
                <tr class="bg-gray-300">
                    <th class="border p-2">Fecha</th>
                    <th class="border p-2">Temp (°C)</th>
                    <th class="border p-2">Humedad (%)</th>
                    <th class="border p-2">VPD (kPa)</th>
                    <th class="border p-2">Dewpoint (°C)</th>
                    <th class="border p-2">Acciones</th>
                </tr>
            </thead>
            <tbody>
                {Array.isArray(logs) && logs.length > 0 ? (
                    logs.map(log => (
                        <tr>
                            <td class="border p-2">{log.recorded_at}</td>
                            <td class="border p-2">{log.temp}</td>
                            <td class="border p-2">{log.humidity}</td>
                            <td class="border p-2">{log.vpd}</td>
                            <td class="border p-2">{log.dewpoint}</td>
                            <td class="border p-2">
                                <button class="text-red-500" onclick={`eliminarRegistro('${log.id}')`}>Eliminar</button>
                            </td>
                        </tr>
                    ))
                ) : (
                    <tr>
                        <td colspan="6" class="border p-2 text-center">No hay registros disponibles.</td>
                    </tr>
                )}
            </tbody>
        </table>
    </div>
</div>

<script is:inline>
    function calcularValores() {
        const temp = parseFloat(document.getElementById('tempInput').value);
        const hum = parseFloat(document.getElementById('humInput').value);

        if (isNaN(temp) || isNaN(hum) || hum < 0 || hum > 100) {
            return;
        }

        const a = 17.27, b = 237.7;
        const alpha = ((a * temp) / (b + temp)) + Math.log(hum / 100);
        const dewpoint = (b * alpha) / (a - alpha);
        const es = 0.6108 * Math.exp((a * temp) / (b + temp));  
        const ea = es * (hum / 100);                             
        const vpd = es - ea;                                      

        document.getElementById('vpdResult').textContent = vpd.toFixed(2);
        document.getElementById('dewpointResult').textContent = dewpoint.toFixed(2);
    }

    async function registrarValores() {
        const temp = parseFloat(document.getElementById('tempInput').value);
        const hum = parseFloat(document.getElementById('humInput').value);
        const vpd = parseFloat(document.getElementById('vpdResult').textContent);
        const dewpoint = parseFloat(document.getElementById('dewpointResult').textContent);

        const formData = new FormData();
        formData.append('temp', temp.toFixed(2));
        formData.append('humidity', hum.toFixed(2));
        formData.append('vpd', vpd.toFixed(2));
        formData.append('dewpoint', dewpoint.toFixed(2));
        formData.append('recorded_at', new Date().toISOString());

        try {
            const response = await fetch('/api/calculator', {
                method: 'POST',
                body: formData,
            });
            const result = await response.json();
            if (result.success) {
                alert('Datos registrados exitosamente.');
                location.reload();
            } else {
                alert('Error: ' + result.error);
            }
        } catch (error) {
            alert('Error de red: ' + error.message);
        }
    }

    async function eliminarRegistro(id) {
        if (!confirm('¿Estás seguro de que deseas eliminar este registro?')) return;

        try {
            const response = await fetch(`/api/calculator?id=${id}`, {
                method: 'DELETE'
            });
            const result = await response.json();
            if (result.success) {
                alert('Registro eliminado exitosamente.');
                location.reload();
            } else {
                alert('Error: ' + result.error);
            }
        } catch (error) {
            alert('Error de red: ' + error.message);
        }
    }
</script>
